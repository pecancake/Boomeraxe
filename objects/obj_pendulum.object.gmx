<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pendulum</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_collision</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// Compensate for sprite origin
x+=10
y+=10

bob=undefined
bob_speed=4
state=s.idle
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause Check

if obj_host.paused
{
    image_speed=0
    exit
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics
if bob=undefined
{
    if string_char_at(variant,2)='0'
    {
        bob=instance_create(x,y-40,obj_pendulum_bob)
    }

    if string_char_at(variant,2)='1'
    {
        bob=instance_create(x,y+40,obj_pendulum_bob)
    }
    
    if string_char_at(variant,2)='2'
    {
        bob=instance_create(x-40,y,obj_pendulum_bob)
    }

    if string_char_at(variant,2)='3'
    {
        bob=instance_create(x+40,y,obj_pendulum_bob)
    }
    
    if string_char_at(variant,1)='0'
    {
        if string_char_at(variant,2)='0'
        {
            state=s.right
        }
        
        if string_char_at(variant,2)='1'
        {
            state=s.left
        }
        
        if string_char_at(variant,2)='2'
        {
            state=s.up
        }
        
        if string_char_at(variant,2)='3'
        {
            state=s.down
        }        
        
        variant='clockwise'
    }
    
    if string_char_at(variant,1)='1'
    {
        if string_char_at(variant,2)='0'
        {
            state=s.left
        }
        
        if string_char_at(variant,2)='1'
        {
            state=s.right
        }
        
        if string_char_at(variant,2)='2'
        {
            state=s.down
        }
        
        if string_char_at(variant,2)='3'
        {
            state=s.up
        }        

        variant='counter_clockwise'
    }
}
    
if variant='counter_clockwise'
{
    switch(state)
    {        
        case s.left:
        {
            if bob.x=x-40 and bob.y=y-40
            {
                state=s.down
            }
            else
            {
                bob.x-=bob_speed
            }
        }break
        
        case s.right:
        {
            if bob.x=x+40 and bob.y=y+40
            {
                state=s.up
            }
            else
            {
                bob.x+=bob_speed
            }
        }break
        
        case s.up:
        {
            if bob.x=x+40 and bob.y=y-40
            {
                state=s.left
            }
            else
            {
                bob.y-=bob_speed
            }
        }break
        
        case s.down:
        {
            if bob.x=x-40 and bob.y=y+40
            {
                state=s.right
            }
            else
            {
                bob.y+=bob_speed
            }
        }break
    }
}

if variant='clockwise'
{
    switch(state)
    {        
        case s.left:
        {
            if bob.x=x-40 and bob.y=y+40
            {
                state=s.up
            }
            else
            {
                bob.x-=bob_speed
            }
        }break
        
        case s.right:
        {
            if bob.x=x+40 and bob.y=y-40
            {
                state=s.down
            }
            else
            {
                bob.x+=bob_speed
            }
        }break
        
        case s.up:
        {
            if bob.x=x-40 and bob.y=y-40
            {
                state=s.right
            }
            else
            {
                bob.y-=bob_speed
            }
        }break
        
        case s.down:
        {
            if bob.x=x+40 and bob.y=y+40
            {
                state=s.left
            }
            else
            {
                bob.y+=bob_speed
            }
        }break
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
