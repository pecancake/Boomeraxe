<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_axe</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

axe_clock=25
state=s.forward

forward_hit=ds_list_create()
backward_hit=ds_list_create()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement Physics

if !instance_exists(obj_player)
{   
    instance_destroy()
    exit
}

// State Machine
switch(state)
{
    case(s.forward):
    {
        if place_meeting(x+hsp,y,obj_collision) or place_meeting(x,y+vsp,obj_collision)
        {
            state=s.hit
        }
        
        if axe_clock=0
        {
            state=s.backward
        }
        else
        {
            axe_clock-=1
        }
        
    break}
    
    case(s.hit):
    {
        create_particles(x,y,'axe_hit')
        state=s.backward
        
    break}
    
    case(s.backward):
    {
        len=point_distance(x,y,obj_player.x,obj_player.y)/20+8
        dir=point_direction(x,y,obj_player.x,obj_player.y)
        
        hsp=lengthdir_x(len,dir)
        vsp=lengthdir_y(len,dir)
        
        if place_meeting(x,y,obj_player)
        {
            obj_player.can_throw=true
            instance_destroy()
        }
        
    break}
}

// Enemy Collision
enemy=instance_nearest(x,y,obj_enemy)

if point_distance(x,y,enemy.x,enemy.y)&lt;10
{
    e_collisions=get_e_collisions(obj_enemy)
                    
    for (i=0;i!=ds_list_size(e_collisions);i++)
    {
        e_collisions[| i].dmg_tint=1
        create_particles(e_collisions[| i].x,e_collisions[| i].y,'blood')
    }
}

// Applying speeds to position

if place_meeting(x+hsp,y,obj_collision) and state!=s.backward
{
    while !place_meeting(x+sign(hsp),y,obj_collision)
    {
        x+=sign(hsp)
    }
}
else
{
    x+=hsp
}

if place_meeting(x,y+vsp,obj_collision) and state!=s.backward
{
    while !place_meeting(x,y+sign(vsp),obj_collision)
    {
        y+=sign(vsp)
    }
}
else
{
    y+=vsp
}

move_snap(1,1)

image_angle-=30*sign(hsp+vsp)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Non-Wall Collisions

sp=instance_place(x,y,obj_savepoint)
if sp!=noone and sp.state=s.close
{
    obj_savepoint.state=s.close
    sp.state=s.open
    create_particles(sp.x,sp.y,'savepoint_get')
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
