<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
idle_timer=20
init_speed=undefined
step=undefined
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics
if !instance_exists(obj_player_death)
{
    instance_destroy()
    exit    
}

if init_speed=undefined
{
    init_speed=speed 
}

if idle_timer=0
{
    if step=undefined
    {
        step=random_range(5,20)
        angle=point_direction(obj_player_death.x,obj_player_death.y,x,y)
        init_distance=point_distance(obj_player_death.x,obj_player_death.y,x,y)
    }
    
    distance=obj_player_death.curr_distance/obj_player_death.init_distance*init_distance
    //angle+=step

    x=obj_player_death.x+lengthdir_x(distance,angle)
    y=obj_player_death.y+lengthdir_y(distance,angle)
    
    
    /*
    current+=(ending-current)/8
    follow_arc(cir_x,cir_y,radius,current)
    /*
    draw_set_alpha(0.1)
    draw_set_colour(colour)
    draw_circle(cir_x,cir_y,radius,0)
    
    draw_set_colour(c_red)
    draw_circle(cir_x,cir_y,4,0)
    
    draw_set_colour(c_lime)
    draw_circle(start_x,start_y,3,0)
    
    draw_set_colour(c_green)
    draw_circle(target_x,target_y,3,0)
    
    draw_set_alpha(1)
    */
}
else
{
    idle_timer-=1
    
    if speed&gt;0
    {
        speed-=init_speed/20
        speed=max(speed,0) 
    }    
}

draw_set_colour(colour)
draw_circle(x,y,scale,0)

draw_set_colour(c_black)
draw_circle(x,y,scale+0.1,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
