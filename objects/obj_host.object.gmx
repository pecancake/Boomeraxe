<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scrolling
if room=rm_main and global.bg_enabled
{
    background_x[0]=view_xview[0]/1.0
    background_x[1]=view_xview[0]/1.2
    background_x[2]=view_xview[0]/1.4
    background_x[3]=view_xview[0]/1.6
    background_x[4]=view_xview[0]/1.8
    background_x[5]=view_xview[0]/2.0
    
    background_y[0]=view_yview[0]/1.0
    background_y[1]=view_yview[0]/1.1
    background_y[2]=view_yview[0]/1.1
    background_y[3]=view_yview[0]/1.1
    background_y[4]=view_yview[0]/1.1
    background_y[5]=view_yview[0]/1.1
    
    background_alpha[6]=global.bg_alpha/10
    background_blend[6]=merge_colour(c_white,c_black,global.bg_value/10)
}

if room=rm_title
{
    background_x[0]+=0.00
    background_x[1]+=0.05
    background_x[2]+=0.05
    background_x[3]+=0.20
    background_x[4]+=0.35
    background_x[5]+=0.50
    
    background_alpha[6]=0.8
    background_blend[6]=merge_colour(c_white,c_black,0.75)
}

switch(global.bg_enabled)
{
    default:
    {
        background_visible[0]=global.bg_enabled
        background_visible[1]=global.bg_enabled
        background_visible[2]=global.bg_enabled
        background_visible[3]=global.bg_enabled
        background_visible[4]=global.bg_enabled
        background_visible[5]=global.bg_enabled
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server Ping

if global.ping_retry&gt;=global.ping_timer
{
    if global.server_connection=true
    {
        global.ping_timer=10*room_speed
    }
    else
    {
        global.ping_timer=3*room_speed
    }
    
    global.ping_retry=0
    
    if global.fail_retries&gt;0
    {
        global.fail_retries-=1
    }
    
    send_payload('ping',global.selected_profile)
}
else if global.fail_retries&gt;0
{
    global.ping_retry+=1
}
else
{
    global.server_connection=false
}
    
if keyboard_check_pressed(ord('R')) and gui_state!=s.profile_create and gui_state!=s.profiles and gui_state!=s.login
{
    global.server_connection=undefined
    global.fail_retries=2
    global.ping_timer=3*room_speed
    global.ping_retry=0
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive and Process Buffer
if async_load[? 'type']=network_type_data
{
    show_debug_message('contact')
    timeout=150
    
    buffer=async_load[? 'buffer']
    packet_id=buffer_read(buffer,buffer_string)
    
    if packet_id='login'
    {
        pass=buffer_read(buffer,buffer_string)
        name=buffer_read(buffer,buffer_string)

        if pass='pass'
        {
            global.login_pass[? name]=true
        }
        else
        {
            global.login_pass[? name]=false
        }
        
        login_update=true
    }
    
    if packet_id='pull'
    {
        check=buffer_read(buffer,buffer_string)
        show_debug_message('Package ID: '+string(check))
        buffer_seek(buffer,buffer_seek_start,0)    
        
        if check='done'
        {            
            buffer_read(buffer,buffer_string)
            buffer_read(buffer,buffer_string)
            complete_size=int64(buffer_read(buffer,buffer_string))
        }
        else
        {
            buffer_read(buffer,buffer_string)
            copy=buffer_create(1,buffer_grow,1)
            buffer_copy(buffer,0,buffer_get_size(buffer),copy,0)
            ds_list_add(buffer_stack,copy)
        }
        show_debug_message(ds_list_size(buffer_stack))

        if complete_size!=undefined and ds_list_size(buffer_stack)*200&gt;=complete_size
        { 
            show_debug_message('compiling packets') 
            for (i=0;i!=ds_list_size(buffer_stack);i+=1)
            {   
                buffer_seek(buffer_stack[| i],buffer_seek_start,0) 
                buffer_read(buffer_stack[| i],buffer_string)       
                repeat(200)
                {
                    if buffer_tell(buffer_stack[| i])!=buffer_get_size(buffer_stack[| i])
                    {
                       pos=buffer_read(buffer_stack[| i],buffer_string)
                       lin=buffer_read(buffer_stack[| i],buffer_string)
                       
                       data_stack[? pos]=lin
                    }
                    else
                    {
                        break
                    }
                }
            }
            for (i=0;i!=ds_list_size(buffer_stack);i+=1)
            {
                buffer_delete(buffer_stack[| i])
            }
            show_debug_message('done')
            
            if complete_size!=0
            {
                write_leaderboard()
            }
            leaderboard_state=s.reading
        }
    }
    
    if packet_id='reciept'
    {
        type=buffer_read(buffer,buffer_string)
        
        if type='push_run'
        {
            global.push_run_reciept=true
        }
        
        if type='push_bind'
        {
            global.push_bind_reciept=true
        }
        
        if type='create'
        {
            show_debug_message('create response')
            if buffer_read(buffer,buffer_string)='pass'
            {
                profile_create_notify('pass')
            }
            else
            {
                profile_create_notify('fail')
            }
        }
    }
    
    if packet_id='ping'
    {
        global.server_connection=true
        global.ping_retry=0
        global.fail_retries=2
        global.ping_timer=30*room_speed
    }
    
    if packet_id='create_name_check'
    {      
        if buffer_read(buffer,buffer_string)='pass'
        {
            name_taken='pass'
        }
        else
        {
            name_taken=true
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

if room=rm_title
{    
    // GUI
    gui_state=s.title
    select_offset=2
    
    // Backgrounds
    background_xscale[0]=2
    background_xscale[1]=2
    background_xscale[2]=2
    background_xscale[3]=2
    background_xscale[4]=2
    background_xscale[5]=2
    
    background_yscale[0]=2
    background_yscale[1]=2
    background_yscale[2]=2
    background_yscale[3]=2
    background_yscale[4]=2
    background_yscale[5]=2 
    
    // Animations
    name_oversized=false
    pass_oversized=false
    pass_mismatch=false
    name_taken=false
    name_invalid=false
    
    name_left_blank=0
    pass0_left_blank=0
    pass1_left_blank=0
    
    check_name_timer=0
    name_error=0
    pass_error=0
    c_create_name=c_white
    c_create_pass=c_white
    exit_confirm=false
}

if room=rm_main
{
    crumble_spawns=ds_list_create()
    telepoint_spawns=ds_list_create()

    room_width=4000
    room_height=2000    
    
    read_data()
    create_level()
    create_spike_and_enemy()
    
    // Backgrounds
    background_xscale[0]=2
    background_xscale[1]=2
    background_xscale[2]=2
    background_xscale[3]=2
    background_xscale[4]=2
    background_xscale[5]=2
    
    background_yscale[0]=2
    background_yscale[1]=2
    background_yscale[2]=2
    background_yscale[3]=2
    background_yscale[4]=2
    background_yscale[5]=2
    
    background_alpha[0]=1
    background_alpha[1]=1
    background_alpha[2]=1
    background_alpha[3]=1
    background_alpha[4]=1
    background_alpha[5]=1
    background_alpha[6]=0.75
    
    // Create starting objects
    instance_create(100,160,obj_player)
    instance_create(64,64,obj_camera)
    instance_create(0,0,obj_debug)
        
    // Time
    global.game_time=0
    
    // States
    run_over=false
    gui_state=s.idle
    network_state=s.idle
    paused=false
    timeout=0
        
    // Scrolling
    y_view_cur=0
    y_view_tar=0
    y_search=0
    y_match=0
    
    // Animations
    profile_match=0 
    prompt_timer=0 
    pause_x=0
    login_fail=0
    logged_in_prompt=0    
    overlay_init_lock=false
    credit_scroll=0
       
    global.kill_count=0
    global.death_count=0
    global.jump_count=0
    global.dash_count=0  
    
    login_update=0
    
    leaderboard_state=s.idle 
    complete_size=0
      
    left_side="Coding###Art####Music###SFX###Debugging&amp;#Testing######Huge Thanks"

    right_side="Pecas###Hazetrance#Pecas###Hazetrance###Pecas###Pecas#Hazetrance#Eric Wang#Arano#Morgoth###GML Discord#You!"
}

if room=rm_end
{
    if global.selected_profile!='anonymous'
    {
        selected_profile=ds_grid_value_y(global.profiles,0,0,0,ds_grid_height(global.profiles),global.selected_profile)
        show_debug_message(selected_profile)
        new_profiles=ds_grid_create(ds_grid_width(global.profiles),ds_grid_height(global.profiles))
        ds_grid_copy(new_profiles,global.profiles)
        new_rank=min(selected_profile+1,calculate_rank())
        
        send_payload('push_run',global.selected_profile,global.game_time,int64(date_second_span(global.unix_start,date_current_datetime())),global.kill_count,global.death_count,global.jump_count,global.dash_count)
    }
            
    global.push_run_timer=240
    global.push_run_reciept=false
    global.push_run_attempt=0
    global.local_save_lock=false  
}

// Global
select=0
hold_up=0
hold_dn=0

x_cur=300
y_cur=300
w_cur=100
h_cur=100

mix=0.2
cursor_blink=0.2

prev_select=0

search_toggle=false
binding_select=undefined
download_overlay=0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Start Initialize

// Time
global.unix_start=date_create_datetime(1970,1,1,0,0,0)

// Other
global.udp_socket=network_create_socket(network_socket_udp)
global.public_udp_ip='99.237.192.34'
global.private_udp_ip='192.168.0.200'
global.ip=global.public_udp_ip//global.ip=global.private_udp_ip
global.udp_port=9000 
global.server_connection=undefined
global.ping_retry=0
global.fail_timer=0
global.fail_retries=2
global.ping_timer=0
global.login_pass=ds_map_create()
global.leaderboard_version=0
global.selected_profile='anonymous'        
global.local_save_lock=false
global.volume_mute=false
global.volume_effects=5
global.volume_music=5
global.overlay_toggle=false
global.flash_enabled=true
global.bg_enabled=true
global.bg_value=4
global.bg_alpha=5.5
global.profiles=undefined

window_set_caption('Boomeraxe')
draw_set_circle_precision(64)
create_enum()

if file_exists('local_save')
{
    global.local_save_mode=true
    read_data()
    show_message('Local save mode enabled!')
}
else
{
    global.local_save_mode=false
    instance_create(0,0,obj_connection_notify)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SPECIAL CASE, DELETE BEFORE GAME LAUNCH

global.maximize_performance=true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GUI
if room=rm_title
{
    switch(gui_state)
    {
        case s.title:
        {
            draw_config(fnt_title_big,c_white,fa_middle,fa_middle)
            draw_text(300,75,'- BOOMERAXE -')
            draw_config(fnt_title,c_white,fa_middle,fa_middle)
            draw_text(300,230,'New Run')
            draw_text(300,320,'New Profile')
            draw_text(300,410,'Feedback')
            
            if !exit_confirm
            {
                draw_text(300,525,'Exit Game')
            }
            else
            {
                draw_text(300,525,'Confirm?')
            }
            
            select=clamp(select,0,3)
            
            if select=0
            {
                draw_select(300,230,180,52,4)
            }
            
            if select=1
            {
                draw_select(300,320,230,52,4)
            }
            
            if select=2
            {
                draw_select(300,410,160,52,4)
            }
            
            if select=3
            {
                draw_select(300,525,180,52,4)
            } 
            
            if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(global.k[? 'jump'])
            {
                if select=0
                {
                    room=rm_main
                }
                
                if select=1
                {
                    gui_state=s.profile_create
                    profile_create_exit=false
                    
                    select=0
                    
                    keyboard_string=''                    
                    mix=0.2                    
                    create_name=''
                    create_pass0=''
                    create_pass1=''
                }
                
                if select=2
                {
                    gui_state=s.options
                }
                
                if select=3
                {
                    if exit_confirm
                    {                    
                        game_end()
                    }
                    else
                    {
                        exit_confirm=true
                    }
                }
            } 
            
            if keyboard_check_pressed(vk_home)
            {
                if global.ip=global.public_udp_ip
                {
                    global.ip=global.private_udp_ip
                    show_message("private ip enabled##hit the home key to disable#this if you aren't Pecas#cause it won't work")
                }          
                else
                {
                    global.ip=global.public_udp_ip
                    show_message("public ip enabled")
                }
            }                   
        }break
        
        case s.profile_create:
        {
            // Background
            draw_area(0,0,599,599,4210752,c_black,0)    // Graphite
            
            // Profile Title
            draw_config(fnt_profile_create_big,c_white,fa_middle,fa_middle)
            draw_text(300,40,"Profile Create")
            
            // Username Box
            draw_area(300-150,135-26,300+150,135+26,4210752,merge_colour(c_white,c_red,clamp(name_left_blank,0,120)/120),2)          // Graphite
            draw_config(fnt_profile_create_small,9868950,fa_middle,fa_middle)   // Pastel
            draw_text(300,135,create_name)    
            
            draw_config(fnt_profile_create_small,c_create_name,fa_middle,fa_middle)
                               
            if name_invalid
            {
                draw_text(300,190,"name contains illegal characters")
            }
            else if name_oversized
            {
                draw_text(300,190,"Name must be 10#characters or less")
            }
            else if name_taken
            {
                draw_text(300,190,"Name is unavailable")
            }
            else if name_taken=undefined
            {
                draw_set_colour(c_white)
                draw_text(300,190,"Checking name...")
            }
            else if name_taken='pass'
            {
                draw_set_colour(c_lime)
                draw_text(300,190,'Name Available!')
            }
            else
            {
                draw_text(300,177,"Choose a Username")
            }
            
            // Password Box
            draw_area(300-150,270-26,300+150,270+26,4210752,merge_colour(c_white,c_red,clamp(pass0_left_blank/120,0,120)),2)          // Graphite
            draw_config(fnt_profile_create,9868950,fa_middle,fa_middle)   // Pastel
            draw_text_transformed(300,260,string_repeat('.',string_length(create_pass0)),1.25,1.5,0)
            
            draw_config(fnt_profile_create_small,c_white,fa_middle,fa_middle)
            draw_text(300,307,"Enter a Password")
            
            // Confirm Password Box
            draw_area(300-150,362-26,300+150,362+26,4210752,merge_colour(c_white,c_red,clamp(pass1_left_blank/120,0,120)),2)          // Graphite
            draw_config(fnt_profile_create,9868950,fa_middle,fa_middle)   // Pastel
            draw_text_transformed(300,352,string_repeat('.',string_length(create_pass1)),1.25,1.5,0)
            
            draw_config(fnt_profile_create_small,c_create_pass,fa_middle,fa_middle) 
                       
            if pass_oversized
            {
                draw_text(300,414,"password must be 20#characters or less")
            }
            else if pass_mismatch
            {
                draw_text(300,402,"passwords do not match")
            }
            else
            {
                draw_text(300,402,"Confirm Password")
            }
            
            // Error Checking
            if string_length(create_name)&gt;10
            {
                name_oversized=true
                name_error=120
            }
            else
            {
                name_oversized=false
            }

            if string_length(create_pass0)&gt;20
            {
                pass_oversized=true
                pass_error=120
            }
            else
            {
                pass_oversized=false
            }
            
            if name_taken
            {
                name_error=120
            }
                        
            if string_count('#',create_name)&gt;0 or string_count('%',create_name)&gt;0 or string_count('[',create_name)&gt;0 or string_count(']',create_name)&gt;0 or !ascii_only(create_name)
            {
                name_error=120
                name_invalid=true
            }
            else
            {
                name_invalid=false
            }
                        
            if create_pass0 != create_pass1
            {
                pass_mismatch=true
                pass_error=120
            }
            else
            {
                pass_mismatch=false
            }
                        
            // Fade out
            if name_left_blank&gt;0
            {
                name_left_blank-=5
            }
            
            if pass0_left_blank&gt;0
            {
                pass0_left_blank-=5
            }
            
            if pass1_left_blank&gt;0
            {
                pass1_left_blank-=5
            }
            
            // Keybindings Button
            draw_area(300-105,478-25,300+105,478+25,4210752,c_white,2)          // Graphite
            
            draw_config(fnt_profile_create_small,c_white,fa_middle,fa_middle)
            draw_text(300,478,"Change Bindings")

            // Create/Cancel Buttons
            draw_area(210-70,552-26,210+70,552+26,4210752,c_white,2)            // Graphite
            draw_area(390-70,552-26,390+70,552+26,4210752,c_white,2)            // Graphite
            
            draw_config(fnt_profile_create_small,c_white,fa_middle,fa_middle)
            draw_text(210,552,"Create")
            draw_text(390,552,"Cancel")  
                                    
            select+=(keyboard_check_pressed(global.k[? 'right']) or keyboard_check_pressed(vk_tab))-keyboard_check_pressed(global.k[? 'left'])
            select=clamp(select,0,5)

            if prev_select!=select
            {
                keyboard_string='placehold'    // must be a string that noone will likely use, hopefully noone wants this as their username
                prev_select=select
            }
                                                        
            if cursor_blink=0.2
            {
                up=true
                down=false
            }
            
            if cursor_blink=0.8
            {
                up=false
                down=true
            }
            
            cursor_blink+=(up-down)*0.03
            
            if keyboard_key!=0
            {
                if ascii_only(keyboard_key) and select=0
                {
                    check_name_timer=25
                }
            }
            
            if check_name_timer&gt;0
            {
                check_name_timer-=1
                if select=0
                {
                   name_taken=undefined
                }
            }
            show_debug_message(check_name_timer)
            if create_name!='' and !name_oversized and !name_invalid and check_name_timer=0
            {
                if global.local_save_mode=false
                {
                    send_payload('create_name_check',string_lower(create_name))
                }
                else
                {
                    name_taken=check_username_availability(string_lower(create_name))
                }
                check_name_timer=-1
            }
            else if create_name=''
            {
                name_taken=false
            }
            
            if select=0
            {
                draw_select(300,135,300,52,3)
                if create_name=''
                {                    
                    draw_cursor(300,135,4,28,cursor_blink,c_white)
                }
                                
                if keyboard_string='placehold'  
                {
                    keyboard_string=create_name
                }
                else
                {
                    create_name=keyboard_string
                }
                
                name_left_blank=0          
            }
            
            if select=1
            {
                draw_select(300,270,300,52,3)
                if create_pass0=''
                {
                    draw_cursor(300,270,4,28,cursor_blink,c_white)
                }
                
                if keyboard_string='placehold'
                {
                    keyboard_string=create_pass0
                }
                else
                {
                    create_pass0=keyboard_string
                }
                
                pass0_left_blank=0
            }
            
            if select=2
            {
                draw_select(300,362,300,52,3)
                if create_pass1=''
                {
                    draw_cursor(300,362,4,28,cursor_blink,c_white)
                }

                if keyboard_string='placehold'
                {
                    keyboard_string=create_pass1
                }
                else
                {
                    create_pass1=keyboard_string
                }
                
                pass1_left_blank=0         
            }
            
            if select=3
            {
                draw_select(300,478,210,50,3)
            }
            
            if select=4
            {
                draw_select(210,552,140,52,3)
            }
            
            if select=5
            {
                draw_select(390,552,140,52,3)
            }  
            
            if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(global.k[? 'jump'])
            {
                show_debug_message(name_taken)
                show_debug_message(name_invalid)
                show_debug_message(name_oversized)
                show_debug_message(pass_mismatch)
                show_debug_message(create_name=='')
                show_debug_message(create_pass0=='')
                show_debug_message(create_pass1=='')
                show_debug_message(global.local_save_mode==false)
                if select=3
                {
                    // keybindings
                }
                
                if select=4
                {
                    if create_name='' or create_pass0='' or create_pass1=''
                    {
                        // Error checking for entries left blank
                        if name_left_blank=0 and create_name='' and select!=0
                        {
                            name_left_blank=120
                        }
                        
                        if pass0_left_blank=0 and create_pass0='' and select!=1
                        {
                            pass0_left_blank=120
                        }
                        
                        if pass1_left_blank=0 and create_pass1='' and select!=2
                        {
                            pass1_left_blank=120
                        }
                    }
                    else
                    {
                        if name_taken='pass' and name_invalid=false and name_oversized=false and pass_mismatch=false and pass_oversized=false
                        {
                            if global.local_save_mode=false
                            {
                                send_payload('create',string_lower(create_name),create_pass0,global.k[? 'up'],global.k[? 'down'],global.k[? 'left'],global.k[? 'right'],global.k[? 'jump'],global.k[? 'throw'],global.k[? 'dash'])
                                profile_create_notify('checking')
                            }
                            else
                            {
                                ini_open('boomeraxe.ini')
                                
                                profile_count=ini_read_real('meta','profile_count',0)
                                
                                ini_write_real('meta','profile_count',profile_count+1)
                                ini_write_string('meta',string(profile_count),string_lower(create_name))
                                ini_write_string(string_lower(create_name),'pass',create_pass0)
                                ini_write_real(string_lower(create_name),'best_time',0)
                                ini_write_real(string_lower(create_name),'best_date',0)
                                ini_write_real(string_lower(create_name),'run_count',0)
                                ini_write_real(string_lower(create_name),'up',global.k[? 'up'])
                                ini_write_real(string_lower(create_name),'down',global.k[? 'down'])
                                ini_write_real(string_lower(create_name),'left',global.k[? 'left'])
                                ini_write_real(string_lower(create_name),'right',global.k[? 'right'])
                                ini_write_real(string_lower(create_name),'jump',global.k[? 'jump'])
                                ini_write_real(string_lower(create_name),'throw',global.k[? 'throw'])
                                ini_write_real(string_lower(create_name),'dash',global.k[? 'dash'])
                                
                                ini_close()
                                
                                
                                ini_open(string_lower(create_name)+'.boomeraxe')
                                
                                ini_write_string('save','pass',create_pass0)
                                ini_write_real('save','up',global.k[? 'up'])
                                ini_write_real('save','down',global.k[? 'down'])
                                ini_write_real('save','left',global.k[? 'left'])
                                ini_write_real('save','right',global.k[? 'right'])
                                ini_write_real('save','jump',global.k[? 'jump'])
                                ini_write_real('save','throw',global.k[? 'throw'])
                                ini_write_real('save','dash',global.k[? 'dash'])
                                
                                ini_close()
                                
                                profile_create_notify('pass')
                                show_debug_message('CREATED')
                            } 
                        }
                    }
                }
                
                if select=5
                {
                    gui_state=s.title
                }
            } 
            
            if keyboard_check_pressed(vk_escape)
            {
                gui_state=s.title
            } 
                                          
        }break
        
        case s.feedback:
        {
            // Profile Login Title
            draw_config(fnt_login,14803425,fa_middle,fa_middle) // Wisp   
            draw_text_transformed(300,50,'- Feedback -',1.4,1.4,0)
            
            // Cancel Prompt
            draw_config(fnt_login_small,9868950,fa_middle,fa_middle)    // Pastel
            draw_text(300,100,'ESC to Cancel')
/*
            draw_text(100,150,'Creativity')
            draw_text(100,'Enjoyment')
            draw_text(100,'Bugless'
            draw_text(100,300,'Art')
            draw_text(100,450,'Audio')
*/            
            
            if keyboard_check_pressed(vk_escape)
            {
                gui_state=s.title
                select=0
            }                    
        }break
    }   
}

if room=rm_main
{
    switch(gui_state)
    {
        case s.idle:
        {
            if keyboard_check_pressed(vk_escape)
            {
                pause_x=-200
                gui_state=s.pause
                exit_confirm=false
                paused=true
                select=0
            }            
        }break
                
        case s.pause:
        {
            if pause_x&lt;0
            {
                pause_x+=50
            }

            if keyboard_check_pressed(vk_escape)
            {
                gui_state=s.idle
                paused=false
            }
            
            // Display
            draw_area(0+pause_x,0,200+pause_x,600,c_white,c_black,3)
            
            draw_config(fnt_pause_big,c_black,fa_middle,fa_middle)
            draw_text(100+pause_x,100,"- Paused -")
            
            draw_config(fnt_pause,c_black,fa_left,fa_middle)
            draw_text(25+pause_x,180,"Continue")
            draw_text(25+pause_x,240,"New Run")
            draw_text(25+pause_x,300,"Profiles")
            draw_text(25+pause_x,360,"Options")
            
            if exit_confirm
            {
                draw_text(25+pause_x,420,"Confirm?")
            }
            else
            {            
                draw_text(25+pause_x,420,"Title Screen")
            }
            
            draw_area(5+pause_x,489,195+pause_x,525,c_ltgray,c_black,3)
            draw_config(fnt_pause,c_black,fa_middle,fa_middle)
            
            if global.selected_profile='anonymous'
            {
                draw_text_transformed(100+pause_x,508,'Not logged in',1,1,0)
            }
            else
            {
                draw_text(100+pause_x,508,global.selected_profile)
            }
            
            draw_area(5+pause_x,529,195+pause_x,595,c_ltgray,c_black,3)
            draw_config(fnt_pause_big,c_black,fa_middle,fa_middle)
            draw_text_transformed(100+pause_x,552,format_time(global.game_time,false),1.1,1.1,0)
            
            draw_config(fnt_pause_big,c_black,fa_middle,fa_middle)
            draw_text_transformed(100+pause_x,578,"Current Time",0.56,0.56,0)
            
            // User Input
            select=clamp(select,0,4)
            draw_select(100+pause_x,180+select*60,195,45,2)
            
            if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(global.k[? 'jump'])
            {
                if select=0
                {
                    gui_state=s.idle
                    paused=false
                }
                
                if select=1
                {
                    room_restart()
                }
                
                if select=2
                {
                    select=0
                    gui_state=s.profiles
                    keyboard_string=''
                    leaderboard_state=s.downloading
                }
                
                if select=3
                {
                    gui_state=s.options
                }
                
                if select=4
                {
                    if exit_confirm=true
                    {
                        room=rm_title
                    }
                    else
                    {
                        exit_confirm=true
                    }
                }
            }            
        }break
        
        case s.options:
        {
            // Display
            draw_area(0,0,200,600,c_white,c_black,3)
            
            draw_config(fnt_pause_big,c_black,fa_middle,fa_middle)
            draw_text(100,100,"- Options -")
            
            draw_config(fnt_pause,c_black,fa_left,fa_middle)
            draw_text(25,180,"Video")            
            draw_text(25,240,"Audio")
            draw_text(25,300,"Overlay: ")
            draw_text(25,360,"Keybindings")
            draw_text(25,420,"Back")
            
            draw_config(fnt_pause_big,c_black,fa_left,fa_middle)
            
            if global.overlay_toggle
            {
                draw_text(135,300,"On")
            }
            else
            {
                draw_text(135,300,"Off")
            }
            
            draw_area(5,489,195,525,c_ltgray,c_black,3)
            draw_config(fnt_pause,c_black,fa_middle,fa_middle)
            
            if global.selected_profile='anonymous'
            {
                draw_text_transformed(100+pause_x,508,'Not logged in',1,1,0)
            }
            else
            {
                draw_text(100+pause_x,508,global.selected_profile)
            }
            
            draw_area(5+pause_x,529,195+pause_x,595,c_ltgray,c_black,3)
            draw_config(fnt_pause_big,c_black,fa_middle,fa_middle)
            draw_text_transformed(100+pause_x,552,format_time(global.game_time,false),1.1,1.1,0)
            
            draw_config(fnt_pause_big,c_black,fa_middle,fa_middle)
            draw_text_transformed(100+pause_x,578,"Current Time",0.56,0.56,0)
            
            // User Input
            select=clamp(select,0,4)
            draw_select(100+pause_x,180+select*60,195,45,2)
            
            if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(global.k[? 'jump'])
            {
                if select=0
                {
                    gui_state=s.options_video
                }
                
                if select=1
                {
                    gui_state=s.options_audio
                }               
                if select=2
                {
                     global.overlay_toggle=global.overlay_toggle==false
                }
                
                if select=3
                {
                    binding_select=undefined
                    gui_state=s.keybind
                }
                
                if select=4
                {
                    gui_state=s.pause
                    exit_confirm=false
                }
            }
            
            if keyboard_check_pressed(vk_escape)
            {
                gui_state=s.pause
                exit_confirm=false
            }
        }break
        
        case s.options_video:
        {
            // Display
            draw_area(0,0,200,600,c_white,c_black,3)
            
            draw_config(fnt_pause_big,c_black,fa_middle,fa_middle)
            draw_text(100,100,"- Video -")
            
            draw_config(fnt_pause,c_black,fa_left,fa_middle)
            draw_text(25,240,"BG : ")
            draw_text(25,180,"Flash : ")
            
            if global.bg_enabled
            {
                draw_text(25,300,"Sat : ")            
                draw_text(25,360,"Alpha : ")
                draw_text(25,420,"Back")
            }
            else
            {
                draw_text(25,300,"Back")
            }

            draw_config(fnt_pause_big,c_black,fa_left,fa_middle)

            if global.bg_enabled
            {
                draw_text(125,240,'on')
                draw_text(125,300,string(global.bg_value/10))
                draw_text(125,360,string(global.bg_alpha/10)) 
            }
            else
            {
                draw_text(125,240,'off')
            }
            
            if global.flash_enabled
            {
                draw_text(125,180,'on')
            }
            else
            {
                draw_text(125,180,'off')
            }
            
            draw_area(5,489,195,525,c_ltgray,c_black,3)
            draw_config(fnt_pause,c_black,fa_middle,fa_middle)
            
            if global.selected_profile='anonymous'
            {
                draw_text_transformed(100+pause_x,508,'Not logged in',1,1,0)
            }
            else
            {
                draw_text(100+pause_x,508,global.selected_profile)
            }
            
            draw_area(5+pause_x,529,195+pause_x,595,c_ltgray,c_black,3)
            draw_config(fnt_pause_big,c_black,fa_middle,fa_middle)
            draw_text_transformed(100+pause_x,552,format_time(global.game_time,false),1.1,1.1,0)
            
            draw_config(fnt_pause_big,c_black,fa_middle,fa_middle)
            draw_text_transformed(100+pause_x,578,"Current Time",0.56,0.56,0)
            
            if global.bg_enabled
            {
                // User Input
                select=clamp(select,0,4)
                draw_select(100+pause_x,180+select*60,195,45,2)
                
                if select=1
                {
                    global.bg_value+=(keyboard_check_pressed(global.k[? 'right'])-keyboard_check_pressed(global.k[? 'left']))*0.5
                }
                
                if select=2
                {
                    global.bg_alpha+=(keyboard_check_pressed(global.k[? 'right'])-keyboard_check_pressed(global.k[? 'left']))*0.5
                }
                
                global.bg_value=clamp(global.bg_value,0,10)
                global.bg_alpha=clamp(global.bg_alpha,0,10)
    
                if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(global.k[? 'jump'])
                {
                    if select=0
                    {
                        global.flash_enabled=(global.flash_enabled==false)
                    }
                    
                    if select=1
                    {
                        global.bg_enabled=(global.bg_enabled==false)
                    }
                    
                    if select=4
                    {            
                        gui_state=s.options
                        exit_confirm=false
                    }
                }
            }
            else
            {
                select=clamp(select,0,2)
                draw_select(100+pause_x,180+select*60,195,45,2)
                
                if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(global.k[? 'jump'])
                {
                    if select=0
                    {
                        global.flash_enabled=(global.flash_enabled==false)
                    }
                    
                    if select=1
                    {
                        global.bg_enabled=(global.bg_enabled==false)
                    }
                    
                    if select=2
                    {            
                        gui_state=s.options
                        exit_confirm=false
                    }
                }
            }
            if keyboard_check_pressed(vk_escape)
            {
                gui_state=s.options
                exit_confirm=false
            }
        }break
        
        case s.options_audio:
        {
            // Display
            draw_area(0,0,200,600,c_white,c_black,3)
            
            draw_config(fnt_pause_big,c_black,fa_middle,fa_middle)
            draw_text(100,100,"- Audio -")
            
            draw_config(fnt_pause,c_black,fa_left,fa_middle)
            draw_text(25,180,"MUTE: ")
            
            if !global.volume_mute
            {
                draw_text(25,240,"SFX : ")            
                draw_text(25,300,"BG : ")
                draw_text(25,360,"Back")
            }
            else
            {
                draw_text(25,240,"Back")
            }
            
            draw_config(fnt_pause_big,c_black,fa_left,fa_middle)
            
            if global.volume_mute
            {
                draw_text(105,180,'True')
            }
            else
            {
                draw_text(105,180,'False')
                draw_text(125,240,string(global.volume_effects))
                draw_text(125,300,string(global.volume_music))  
            }
                        
            draw_area(5,489,195,525,c_ltgray,c_black,3)
            draw_config(fnt_pause,c_black,fa_middle,fa_middle)
            
            if global.selected_profile='anonymous'
            {
                draw_text_transformed(100+pause_x,508,'Not logged in',1,1,0)
            }
            else
            {
                draw_text(100+pause_x,508,global.selected_profile)
            }
            
            draw_area(5+pause_x,529,195+pause_x,595,c_ltgray,c_black,3)
            draw_config(fnt_pause_big,c_black,fa_middle,fa_middle)
            draw_text_transformed(100+pause_x,552,format_time(global.game_time,false),1.1,1.1,0)
            
            draw_config(fnt_pause_big,c_black,fa_middle,fa_middle)
            draw_text_transformed(100+pause_x,578,"Current Time",0.56,0.56,0)
            
            // User Input
            if !global.volume_mute
            {
                select=clamp(select,0,3)
                draw_select(100+pause_x,180+select*60,195,45,2)

                if select=1
                {
                    global.volume_effects+=keyboard_check_pressed(global.k[? 'right'])-keyboard_check_pressed(global.k[? 'left'])
                }
                
                if select=2
                {
                    global.volume_music+=keyboard_check_pressed(global.k[? 'right'])-keyboard_check_pressed(global.k[? 'left'])
                }
                
                global.volume_effects=clamp(global.volume_effects,0,10)
                global.volume_music=clamp(global.volume_music,0,10)
    
                if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(global.k[? 'jump'])
                {
                    if select=0
                    {
                        global.volume_mute=(global.volume_mute==false)
                    }
                    
                    if select=3
                    {            
                        gui_state=s.options
                        exit_confirm=false
                    }
                }
            }
            else
            {
                select=clamp(select,0,1)
                draw_select(100+pause_x,180+select*60,195,45,2)
            
                if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(global.k[? 'jump'])
                {
                    if select=0
                    {
                        global.volume_mute=(global.volume_mute==false)
                    }
                    
                    if select=1
                    {
                        gui_state=s.options
                        exit_confirm=false
                    }
                }
            }                
            if keyboard_check_pressed(vk_escape)
            {
                gui_state=s.options
                exit_confirm=false
            }
   
        }break
        
        case s.profiles:
        {
            switch(leaderboard_state)
            {
                case s.downloading:
                {
                    if global.local_save_mode=true or global.server_connection=false
                    {
                        download_overlay=80
                        read_data()
                        leaderboard_state=s.idle                    
                    }
                    else
                    {
                        global.profiles=undefined
                        download_data()
                    }                    
                }break
                
                case s.download_wait:
                {
                    if timeout=0
                    {
                        show_message("timed out error")
                        read_data()
                        leaderboard_state=s.idle
                    }
                    else
                    {
                        timeout-=1
                    }
                    
                }break
                
                case s.reading:
                {
                    read_data()
                    leaderboard_state=s.idle
                    
                }break
            }
            
            if global.profiles!=undefined
            {
                select=clamp(select,0,profile_count-1)
                
                // Configuring scrolling
                if -60*(select-5)&lt;=0
                {
                    y_view_tar=-60*(select-5)
                    
                    if select=profile_count-1
                    {
                        y_view_tar+=40
                    }
                }
                else
                {
                    y_view_tar=0
                }
                
                // Smoothing
                y_view_cur+=(y_view_tar-y_view_cur)/3
                if abs(y_view_tar-y_view_cur)&lt;5
                {
                    y_view_cur=y_view_tar
                }
                
                if !search_toggle
                {
                    keyboard_string=''
                }

                // Background
                draw_area(0,0,599,599,c_white,c_black,1)
                
                // Profiles
                draw_area(1,80,598,599,c_dkgray,c_black,1)
                                
                for (i=0;i!=profile_count;i++)
                {         
                    if global.profiles[#1,i]!=undefined    
                    {
                        if i=0
                        {
                            // Profile
                            draw_area(1,80+y_view_cur,598,199+y_view_cur,3517429,c_black,1)     // Gold
                            
                            // Rank
                            draw_area(8,87+y_view_cur,114,193+y_view_cur,3118552,c_black,1)     // Darker Gold
                            draw_config(fnt_profiles_big,c_black,fa_middle,fa_middle)
                            draw_text_transformed(64,137+y_view_cur,'1',2,2,0)
                            
                            // Username
                            draw_config(fnt_profiles_big,c_black,fa_middle,fa_middle)
                            draw_text_transformed(500,140+y_view_cur,global.profiles[#0,i],string_scale(global.profiles[#0,i],4.5),string_scale(global.profiles[#0,i],4.5),0)
                            
                            // Best Time
                            draw_config(fnt_profiles_big,c_black,fa_left,fa_middle)
                            draw_text_transformed(135,120+y_view_cur,format_time(global.profiles[#1,i],false),1.1,1.1,0)
                            
                            // Best Time (date)
                            draw_config(fnt_profiles,c_black,fa_left,fa_middle)
                            draw_text(135,165+y_view_cur,format_datetime(global.profiles[#2,i]))
                        }
                        else if i=1
                        {
                            scale=0.8
                                            
                            // Profile
                            draw_area(1,200+y_view_cur,598,299+y_view_cur,13157819,c_black,1)   // Silver
                            
                            // Rank
                            draw_area(8,207+y_view_cur,92,292+y_view_cur,11184288,c_black,1)    // Darker Silver
                            draw_config(fnt_profiles_big,c_black,fa_middle,fa_middle)
                            draw_text_transformed(54,247+y_view_cur,'2',1.2,1.2,0)
                            
                            // Username
                            draw_config(fnt_profiles_big,c_black,fa_middle,fa_middle)
                            draw_text_transformed(480,250+y_view_cur,global.profiles[#0,i],string_scale(global.profiles[#0,i],5),string_scale(global.profiles[#0,i],5),0)
                            
                            // Best Time
                            draw_config(fnt_profiles_big,c_black,fa_left,fa_middle)
                            draw_text_transformed(114,230+y_view_cur,format_time(global.profiles[#1,i],false),scale,scale,0)
                            
                            // Best Time (date)
                            draw_config(fnt_profiles,c_black,fa_left,fa_middle)
                            draw_text_transformed(114,275+y_view_cur,format_datetime(global.profiles[#2,i]),scale+0.1,scale+0.1,0)
                            
                            // Best Time (surplus)
                            draw_config(fnt_profiles,4142654,fa_left,fa_middle) // Kalamata
                            draw_text_transformed(314,230+y_view_cur,format_time(global.profiles[#1,i]-global.profiles[#1,i-1],true),scale,scale,0)
                        } 
                        else if i=2
                        {
                            scale=0.55
                            
                            // Profile
                            draw_area(1,300+y_view_cur,598,379+y_view_cur,5150699,c_black,1)    // Bronze
                            
                            // Rank
                            draw_area(8,307+y_view_cur,72,372+y_view_cur,4621262,c_black,1)     // Darker Bronze
                            draw_config(fnt_profiles_big,c_black,fa_middle,fa_middle)
                            draw_text_transformed(45,337+y_view_cur,'3',1.1,1.1,0)
                            
                            // Username
                            draw_config(fnt_profiles_big,c_black,fa_middle,fa_middle)
                            draw_text_transformed(470,340+y_view_cur,global.profiles[#0,i],string_scale(global.profiles[#0,i],3.5),string_scale(global.profiles[#0,i],3.5),0)
                            
                            // Best Time
                            draw_config(fnt_profiles_big,c_black,fa_left,fa_middle)
                            draw_text_transformed(95,324+y_view_cur,format_time(global.profiles[#1,i],false),scale+0.1,scale+0.1,0)
                            
                            // Best Time (date)
                            draw_config(fnt_profiles,c_black,fa_left,fa_middle)
                            draw_text_transformed(95,360+y_view_cur,format_datetime(global.profiles[#2,i]),0.8,0.8,0)          
                            
                            // Best Time (surplus)
                            draw_config(fnt_profiles,4142654,fa_left,fa_middle) // Kalamata
                            draw_text_transformed(254,324+y_view_cur,format_time(global.profiles[#1,i]-global.profiles[#1,i-1],true),0.8,0.8,0)                               
                        }
                        else
                        {
                            scale=0.45
                            
                            // Profile
                            draw_area(1,200+i*60+y_view_cur,598,259+i*60+y_view_cur,3961266,c_black,1)      // Dirt
                            
                            // Rank
                            draw_area(8,207+i*60+y_view_cur,53,253+i*60+y_view_cur,3564704,c_black,1)       // Darker Dirt
                            draw_config(fnt_profiles_big,c_black,fa_middle,fa_middle)
                            
                            if string_length(string(i+1))=1
                            {
                                r_scale=0.9
                            }
                            
                            if string_length(string(i+1))=2
                            {
                                r_scale=0.65
                            }
                            
                            if string_length(string(i+1))=3
                            {
                                r_scale=0.48
                            }
                            
                            draw_text_transformed(34,227+i*60+y_view_cur,i+1,r_scale,r_scale,0)
                            
                            // Username
                            draw_config(fnt_profiles_big,c_black,fa_middle,fa_middle)
                            draw_text_transformed(460,230+i*60+y_view_cur,global.profiles[#0,i],scale+string_scale(global.profiles[#0,i],7.5),scale+string_scale(global.profiles[#0,i],7.5),0)
                            
                            // Best Time
                            draw_config(fnt_profiles_big,c_black,fa_left,fa_middle)
                            draw_text_transformed(75,218+i*60+y_view_cur,format_time(global.profiles[#1,i],false),scale+0.05,scale+0.05,0)
                            
                            // Best Time (date)
                            draw_config(fnt_profiles,c_black,fa_left,fa_middle)
                            draw_text_transformed(75,245+i*60+y_view_cur,format_datetime(global.profiles[#2,i]),0.7,0.7,0)
                            
                            // Best Time (surplus)
                            draw_config(fnt_profiles,4142654,fa_left,fa_middle) // Kalamata
                            draw_text_transformed(211,218+i*60+y_view_cur,format_time(global.profiles[#1,i]-global.profiles[#1,i-1],true),0.7,0.7,0)
                        }
                    }
                    else
                    {
                        scale=0.45
                        
                        // Profile
                        draw_area(1,200+i*60+y_view_cur,598,259+i*60+y_view_cur,4605510,c_black,1)      // Void
                        
                        // Rank
                        draw_area(8,207+i*60+y_view_cur,53,253+i*60+y_view_cur,2632748,c_black,1)       // Darker Void
                        draw_config(fnt_profiles_big,c_white,fa_middle,fa_middle)
                        
                        draw_text_transformed(34,227+i*60+y_view_cur,"?",0.9,0.9,0)
                        
                        // Username
                        draw_config(fnt_profiles_big,c_white,fa_middle,fa_middle)
                        draw_text_transformed(460,230+i*60+y_view_cur,global.profiles[#0,i],scale+string_scale(global.profiles[#0,i],7.5),scale+string_scale(global.profiles[#0,i],7.5),0)
                        
                        // No Information
                        draw_config(fnt_profiles,c_white,fa_left,fa_middle)
                        draw_text(75,230+i*60+y_view_cur,"No run data found")
                    }
                }
         
                // Title
                draw_area(0,0,599,79,c_ltgray,c_black,1)
                draw_config(fnt_profiles_medium,c_search,fa_middle,fa_middle)
                if string_length(keyboard_string)&gt;0 and search_toggle
                {
                    draw_text(300,40-y_match,'{ '+keyboard_string+' }')
                }
                else if search_toggle
                {
                    draw_cursor(300,40-y_match,4,28,mix,c_black)
                }
                else
                {
                    draw_text(300,40-y_match,"{ 'tab' to search }")
                }
                
                if profile_match&lt;-0.2
                {   
                    draw_config(fnt_profiles,c_search,fa_middle,fa_middle)
                    draw_text(300,55,'This profile does not exist!')
                }
                
                // Selection Box
                if select=0
                {
                    draw_select(300,140+y_view_cur,600,120,4)
                }
                else if select=1
                {
                    draw_select(300,250+y_view_cur,600,100,4)
                }
                else if select=2
                {
                    draw_select(300,340+y_view_cur,600,80,4)
                }
                else
                {
                    draw_select(300,230+select*60+y_view_cur,600,60,4)
                }
                
                // Search Toggle
                if search_toggle
                {
                    draw_set_alpha(0.45)
                    draw_area(0,80,600,600,c_black,c_black,0)
                    draw_set_alpha(1)
                }

                // User Input
                if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(global.k[? 'jump'])
                {
                    if string_length(keyboard_string)&gt;0
                    {
                        if !keyboard_check_pressed(global.k[? 'jump'])
                        {
                            none=true
                            
                            for (z=0;z!=profile_count;z+=1)
                            {                      
                                if string_lower(keyboard_string)=global.profiles[#0,z]
                                {
                                    if z=select
                                    {                    
                                        entry_select=undefined
                                        gui_state=s.profile
                                        user=select
                                        select=0
                                        y_view_cur=0
                                        y_view_tar=0
                                        search_toggle=false
                                        break
                                    }    
                                                            
                                    select=z
                                    none=false  
                                    break
                                }
                            }
                            
                            if none
                            {
                                profile_match=-1
                            }
                            else
                            {
                                profile_match=1
                                search_toggle=false
                            } 
                        }                                                                    
                    }
                    else
                    {                    
                        entry_select=undefined
                        gui_state=s.profile
                        search_toggle=false
                        user=select
                        select=0
                        y_view_cur=0
                        y_view_tar=0
                    }
                }
                
                if keyboard_check_pressed(vk_tab)
                {
                    if search_toggle=true
                    {
                        search_toggle=false
                    }
                    else
                    {
                        search_toggle=true
                    }
                }
                
                if keyboard_check_pressed(vk_escape)
                {
                    if search_toggle
                    {
                        search_toggle=false
                    }
                    else if string_length(keyboard_string)&gt;0
                    {
                        keyboard_string=''
                        search_toggle=false
                    }
                    else
                    {                    
                        gui_state=s.pause
                        exit_confirm=false    
                    }                    
                }
            }
            else
            {
                download_overlay=25
                if keyboard_check_pressed(vk_escape)
                {
                    gui_state=s.pause
                }
            }
            
            if download_overlay&gt;0
            {
                // Background
                draw_set_alpha(download_overlay/25)
                draw_area(0,0,599,599,c_white,c_black,1)
                draw_config(fnt_profiles_medium,c_black,fa_middle,fa_middle)
                if global.local_save_mode or global.server_connection=false
                {
                    draw_text(300,200,"You are in offline mode#Leaderboard cannot update")
                    draw_config(fnt_profiles,c_black,fa_middle,fa_middle)
                    draw_text(300,400,"(Press 'R' while outside of profiles#to attempt reconnection)")
                }
                else
                {
                    draw_text(300,200,'Retrieving leaderboard#from server...#(this might take a while)')
                    
                    if timeout=0
                    {
                        draw_config(fnt_profiles,c_black,fa_middle,fa_middle)
                        draw_text(300,400,'Could not connect to server#Loading cached leaderboard...')
                    }                
                    else if global.profiles!=undefined
                    {
                        draw_text(300,400,'Success! Loading leaderboard...')
                    }
                }
                download_overlay-=1
            }

        }break
        
        case s.profile:
        {
            if global.profiles[#1,user]!=undefined
            {
                select=clamp(select,0,global.profiles[#3,user])
            }
            else
            {
                select=clamp(select,0,0)
            }
    
            // Configuring scrolling
            if -50*(select-2)&lt;=0 and global.profiles[#3,user]&gt;3
            {
                y_view_tar=-50*(select-2)
                
                if select=global.profiles[#3,user]
                {
                    y_view_tar+=50
                }
            }
            
            // Smooth
            y_view_cur+=(y_view_tar-y_view_cur)/3
            if abs(y_view_tar-y_view_cur)&lt;5
            {
                y_view_cur=y_view_tar
            }
                        
            // Background
            draw_area(0,0,599,599,c_white,c_black,1)
                        
            // Bot area
            draw_area(1,450,598,598,6581117,c_black,1)     // Kalamata
            
            if global.profiles[#1,user]=undefined
            {
                draw_config(fnt_profile_small,c_black,fa_middle,fa_middle)
                draw_text(300,520,"(And also here)")
            }
            else
            {                        
                // Precalculations for graph
                lo=global.profiles[#10,user]
                hi=global.profiles[#10,user]
                
                // Run log
                for (i=0;i!=global.profiles[#3,user]*6;i+=6)
                {
                    // Run
                    draw_area(2,450+i/6*50+y_view_cur,598,500+i/6*50+y_view_cur,10595785,c_black,2)     // Kalamata White
                    
                    // Number
                    draw_area(6,454+i/6*50+y_view_cur,50,496+i/6*50+y_view_cur,10595785,c_black,2)      // Kalamata White
                    draw_config(fnt_profile_small,c_black,fa_middle,fa_middle)
                    draw_text(28,475+i/6*50+y_view_cur,i/6+1)
                    
                    // Time
                    draw_config(fnt_profile_small,c_black,fa_left,fa_middle)
                    draw_text(60,475+i/6*50+y_view_cur,format_time(global.profiles[#i+4,user],false))
                    
                    // Time (surplus)
                    if i&gt;0
                    {
                        draw_config(fnt_profile_tiny,4142654,fa_left,fa_middle)                         // Kalamata
                        draw_text(160,475+i/6*50+y_view_cur,format_time(global.profiles[#i+4,user]-global.profiles[#(i-6)+4,user],true))
                    }
                    
                    // Time (date)
                    draw_config(fnt_profile_small,c_black,fa_right,fa_middle)
                    draw_text(575,475+i/6*50+y_view_cur,format_datetime(global.profiles[#i+5,user]))
                                        
                    if global.profiles[#i+4,user]&lt;lo
                    {
                        lo=global.profiles[#i+4,user]
                    }
                    
                    if global.profiles[#i+4,user]&gt;hi
                    {
                        hi=global.profiles[#i+4,user]
                    }                
                }
            }
            
            // Rank            
            if global.profiles[#1,user]!=undefined
            {
                if user=0
                {
                    c_rank=3118552
                }
                else if user=1
                {
                    c_rank=11184288
                }
                else if user=2
                {
                    c_rank=4621262
                }
                else
                {
                    c_rank=3564704
                }
                
                if string_length(string(user+1))=1
                {
                    r_scale=1
                }
                
                if string_length(string(user+1))=2
                {
                    r_scale=0.75
                }
                
                if string_length(string(user+1))=3
                {
                    r_scale=0.55
                }  
                          
                draw_area(0,0,76,76,c_rank,c_black,2)
                draw_config(fnt_profile_big,c_black,fa_middle,fa_middle)
                draw_text_transformed(40,38,user+1,r_scale,r_scale,0)
            }
            else
            {
                draw_area(0,0,76,76,2632748,c_black,2)  // Darker Void
                draw_config(fnt_profile_big,c_white,fa_middle,fa_middle)
                draw_text(40,38,'?')
            }

            // Mid area
            draw_area(1,150,598,449,13426922,c_black,2) // Limestone White            
            
            if global.profiles[#1,user]=undefined
            {
                draw_config(fnt_profile,4142654,fa_middle,fa_middle)    // Kalamata
                draw_text(300,300,"Your data will#appear here after#completing runs")
            }
            
            if global.profiles[#1,user]!=undefined
            {
                if entry_select=undefined
                {     
                    // Graph
                    draw_graph(lo,hi) 
                }
                else
                {
                    // Final Runtime
                    draw_config(fnt_entry_big,c_black,fa_middle,fa_middle)
                    draw_text(300,185,format_time(global.profiles[#(entry_select-1)*6+4,user],false))
                    draw_config(fnt_entry_tiny,c_black,fa_middle,fa_middle)
                    draw_text(300,225,'Final Runtime')
                    
                    // Surplus (world record)
                    draw_config(fnt_entry_small,4995380,fa_middle,fa_middle)    // Grayish
                    draw_text(150,254,format_time(global.best_time,false))
                    draw_config(fnt_entry_tiny,4079406,fa_middle,fa_middle)     // Murky Turquoise
                    draw_text(150,274,'World Record')
                    
                    if global.profiles[#(entry_select-1)*6+4,user]-global.best_time&gt;0
                    {
                        draw_config(fnt_entry_small,3018673,fa_middle,fa_middle)    // Crimson
                        draw_text(450,254,format_time(global.profiles[#(entry_select-1)*6+4,user]-global.best_time,true))
                    }
                    else
                    {
                        draw_config(fnt_entry_small,2852688,fa_middle,fa_middle)    // Radioactive
                        draw_text(450,254,format_time(global.profiles[#(entry_select-1)*6+4,user]-global.best_time,true))
                    }
                    
                    // Surplus (personal record)
                    draw_config(fnt_entry_small,4995380,fa_middle,fa_middle)    // Grayish
                    draw_text(150,311,format_time(global.profiles[#1,user],false))
                    draw_config(fnt_entry_tiny,4079406,fa_middle,fa_middle)     // Murky Turquoise
                    draw_text(150,331,'Personal Record')
                    
                    if global.profiles[#(entry_select-1)*6+4,user]-global.profiles[#1,user]&gt;0
                    {
                        draw_config(fnt_entry_small,3018673,fa_middle,fa_middle)    // Crimson
                        draw_text(450,311,format_time(global.profiles[#(entry_select-1)*6+4,user]-global.profiles[#1,user],true))
                    }
                    else
                    {
                        draw_config(fnt_entry_small,2852688,fa_middle,fa_middle)    // Radioactive
                        draw_text(450,311,format_time(global.profiles[#(entry_select-1)*6+4,user]-global.profiles[#1,user],true))
                    }
                
                    // Stats
                    draw_config(fnt_entry,4995380,fa_middle,fa_middle)          // Grayish
                    draw_text(90,375,global.profiles[#(entry_select-1)*6+6,user])
                    draw_text(230,375,global.profiles[#(entry_select-1)*6+7,user])
                    draw_text(370,375,global.profiles[#(entry_select-1)*6+8,user])
                    draw_text(510,375,global.profiles[#(entry_select-1)*6+9,user])
                    
                    draw_config(fnt_entry_tiny,4079406,fa_middle,fa_middle)    // Murky Turquoise
                    draw_text(90,405,'Kills')
                    draw_text(230,405,'Deaths')
                    draw_text(370,405,'Jumps')
                    draw_text(510,405,'Dashes')    
                    
                    // Prompt
                    draw_config(fnt_entry_tiny,c_black,fa_middle,fa_middle)
                    draw_text(300,430,'ESC to go back')            
                }
            }
            
            // Login Banner
            draw_area(76,0,599,76,6713446,c_black,2)    // Gray Green
            draw_config(fnt_profile_big,c_black,fa_middle,fa_middle)
            
            if global.selected_profile!=global.profiles[#0,user]
            {
                draw_text(339,38,"Profile Login")
            }
            else if logged_in_prompt&gt;0
            {
                draw_set_alpha(logged_in_prompt/50)
                draw_text(339,34,"Logged In!")
                draw_set_alpha(1)
            }
            else
            {
                draw_config(fnt_profile,c_black,fa_middle,fa_middle)            
                draw_text(339,34,"Select to Log Out")
            }
            
            // Username
            draw_area(1,76,598,149,8626336,c_black,1)    // Limestone
            draw_config(fnt_profile_big,4142654,fa_middle,fa_middle) // Kalamata
            
            draw_text_transformed(150,113,global.profiles[#0,user],0.9,0.9,0)
                       
            if global.profiles[#1,user]!=undefined
            {            
                // Best Time
                draw_config(fnt_profile,c_black,fa_middle,fa_middle)
                draw_text_transformed(450,105,format_time(global.profiles[#1,user],false),0.9,0.9,0)
                
                // Best Time (surplus)
                draw_config(fnt_profile,4142654,fa_middle,fa_middle) // Kalamata
                if user!=0
                {
                    draw_text_transformed(450,130,format_time(global.profiles[#1,user]-global.profiles[#1,user-1],true),0.5,0.5,0)
                }
                else
                {
                    draw_text_transformed(450,130,format_time(0,true),0.5,0.5,0)
                }
            }
            else
            {
                // No Information
                draw_config(fnt_profile_small,4142654,fa_middle,fa_middle)  // Kalamata
                draw_text(450,113,'Best Time#Unavailable')
            }
            
            // Selection Box
            if select=0
            {
                draw_select(339,38+y_view_cur,523,76,5)
            }
            else
            {
                draw_select(300,475+(select-1)*50+y_view_cur,600,50,3)
            }
            
            if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(global.k[? 'jump'])
            {
                if select=0
                {
                    overlay_init_lock=false
                                        
                    if global.selected_profile=global.profiles[#0,user]
                    {
                        global.selected_profile='anonymous'
                    }
                    else
                    {
                        if global.local_save_mode
                        {
                            global.selected_profile=global.profiles[#0,user]    
                            username=user
                            login_bindings()
                                
                            logged_in_prompt=120
                        }
                        else
                        {
                            gui_state=s.login
                            keyboard_string=''
                            mix=0.2 
                        }
                    }                   
                }
                else
                {
                    entry_select=select
                    prev_select=select
                }
            }
            
            if keyboard_check_pressed(vk_escape)
            {
                if entry_select=undefined
                {
                    gui_state=s.profiles
                    keyboard_string=''
                    select=0
                    y_view_cur=0
                    y_view_tar=0
                }
                else
                {
                    entry_select=undefined
                }
            }                    
        }break
        
        case s.login:
        {
            // Background
            draw_area(0,0,599,599,4210752,c_black,3)    // Graphite
            
            // Profile Login Title
            draw_config(fnt_login,14803425,fa_middle,fa_middle) // Wisp   
            draw_text_transformed(300,50,'Profile Login',1.4,1.4,0)
            
            // Cancel Prompt
            draw_config(fnt_login_small,9868950,fa_middle,fa_middle)    // Pastel
            draw_text(300,100,'ESC to Cancel')
            
            // Username
            draw_config(fnt_login_big,c_white,fa_middle,fa_middle)
            draw_text(300,260,global.profiles[#0,user])
            
            // Password Box
            draw_config(fnt_login_big,c_black,fa_middle,fa_middle)
            draw_area(300-150,330-28,300+150,330+28,4210752,c_white,2)  // Graphite
            
            if global.server_connection=false
            {
                // Offline Error
                draw_config(fnt_login_small,c_red,fa_middle,fa_middle)
                draw_text(300,415,'you cannot login#in offline mode')
            }
            
            if login_fail!=0
            {
                draw_set_alpha(login_fail)
                draw_config(fnt_login,merge_colour(c_white,c_red,login_fail),fa_middle,fa_middle)
                draw_text(300,420,"Login attempt failed")
                draw_set_alpha(1)
            }
            
            if keyboard_string=""
            {
                draw_cursor(300,330,4,28,cursor_blink,c_white)
                
                if cursor_blink=0.2
                {
                    up=true
                    down=false
                }
                
                if cursor_blink=0.8
                {
                    up=false
                    down=true
                }
                
                cursor_blink+=(up-down)*0.03
            }
            
            draw_config(fnt_login_big,c_white,fa_middle,fa_middle)
            draw_text(300,320,string_repeat('.',clamp(string_length(keyboard_string),0,30)))
            
            // Enter Prompt
            draw_config(fnt_login,14803425,fa_middle,fa_middle)     // Wisp
            draw_text(300,550,'ENTER to Confirm')
            
            if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(global.k[? 'jump'])
            {                
                send_payload("login",global.profiles[#0,user],keyboard_string)
            }

            if login_update
            {                          
                if global.login_pass[? global.profiles[#0,user]]=true
                {
                    global.selected_profile=global.profiles[#0,user]
                    
                    username=get_username_from_name(global.selected_profile)
                    login_bindings()
                    
                    logged_in_prompt=120
                    gui_state=s.profile                    
                }
                
                if global.login_pass[? global.profiles[#0,user]]=false
                {
                    login_fail=1
                }
                
                login_update=false
            }
            
            if keyboard_check_pressed(vk_escape)
            {
                gui_state=s.profile
            }
                                
        }break
        
        case s.keybind:
        {
            select=clamp(select,0,6)
            
            draw_area(0,0,599,599,6581117,c_black,3)    // Kalamata
            
            draw_config(fnt_keybind_big,c_black,fa_middle,fa_middle)
            draw_text(300,50,'KEYBINDINGS')
            draw_config(fnt_keybind,4995380,fa_middle,fa_middle)    // Grayish
            draw_text(300,90,'ESC to exit')
            
            draw_config(fnt_keybind_big,c_black,fa_middle,fa_middle)
            draw_text(150,163,'up')
            draw_text(150,225,'down')
            draw_text(150,288,'left')
            draw_text(150,350,'right')
            draw_text(150,413,'jump')
            draw_text(150,475,'throw axe')
            draw_text(150,538,'dash')
            
            draw_config(fnt_keybind,c_black,fa_middle,fa_middle)
            draw_key(450,163,global.k[? 'up'])
            draw_key(450,225,global.k[? 'down'])
            draw_key(450,288,global.k[? 'left'])
            draw_key(450,350,global.k[? 'right'])
            draw_key(450,413,global.k[? 'jump'])
            draw_key(450,475,global.k[? 'throw'])
            draw_key(450,538,global.k[? 'dash'])
            
            if binding_select=undefined
            {
                if select=0
                {
                    draw_select(450,163,string_width(string_key(global.k[? 'up']))+20,string_height(string_key(global.k[? 'left']))+20,4)
                }
            
                if select=1
                {
                    draw_select(450,225,string_width(string_key(global.k[? 'down']))+20,string_height(string_key(global.k[? 'right']))+20,4)
                }
    
                if select=2
                {
                    draw_select(450,288,string_width(string_key(global.k[? 'left']))+20,string_height(string_key(global.k[? 'up']))+20,4)
                }
            
                if select=3
                {
                    draw_select(450,350,string_width(string_key(global.k[? 'right']))+20,string_height(string_key(global.k[? 'down']))+20,4)
                }
    
                if select=4
                {
                    draw_select(450,413,string_width(string_key(global.k[? 'jump']))+20,string_height(string_key(global.k[? 'throw']))+20,4)
                }
            
                if select=5
                {
                    draw_select(450,475,string_width(string_key(global.k[? 'throw']))+20,string_height(string_key(global.k[? 'jump']))+20,4)
                }
                
                if select=6
                {
                    draw_select(450,538,string_width(string_key(global.k[? 'dash']))+20,string_height(string_key(global.k[? 'dash']))+20,4)
                }
            }
            else
            {
                draw_area(330,133+63*binding_select,570,193+63*binding_select,6581117,0,0)    // Kalamata
                
                if prompt_timer&gt;0
                {
                    prompt_timer-=1
                }
                else
                {
                    binding_prompt='Press new key'  
                }
                              
                if keyboard_key and keyboard_key!=vk_enter
                {
                    if keyboard_key!=vk_escape and keyboard_key!=vk_backspace and !binding_taken()
                    {
                        update_bindings()
                        
                        if global.selected_profile!="anonymous"
                        {
                            if global.local_save_mode=false
                            {                                                    
                                send_payload("push_bind",global.selected_profile,global.k[? 'up'],global.k[? 'down'],global.k[? 'left'],global.k[? 'right'],global.k[? 'jump'],global.k[? 'throw'],global.k[? 'dash'])
                            }
                            else
                            {
                                write_local_bindings()
                            }
                        }
                        
                        binding_select=undefined
                    }
                    else if binding_taken()
                    {
                        prompt_timer=50
                        binding_prompt='Already taken'
                    }
                    else
                    {
                        prompt_timer=50
                        binding_prompt='Invalid Key'
                    }
                }                              
            }
            
            if binding_select!=undefined
            {
                draw_config(fnt_keybind,c_black,fa_middle,fa_middle)
                draw_text(450,163+63*binding_select,binding_prompt)
                draw_select(450,163+63*binding_select,string_width(binding_prompt)+20,string_height(binding_prompt)+20,4)
            }
            
            if keyboard_check_pressed(vk_enter)
            {
                binding_select=select
            }
                
            if keyboard_check_pressed(vk_escape)
            {
                gui_state=s.options
                select=0
            }                                 
        }break        
    }
    
    if global.overlay_toggle=false
    {
        overlay_init_lock=false 
        if instance_exists(obj_overlay_row)
        {
            instance_destroy(obj_overlay_row)
        }
    }    
    else
    {
        if gui_state=s.idle or gui_state=s.pause or gui_state=s.options
        {
            if instance_exists(obj_overlay_row)
            {
                obj_overlay_row.image_alpha=1
            }
            
            if global.profiles!=undefined
            {
                if overlay_init_lock=false
                {
                    show_debug_message('overlay reinitialized')
                    
                    if instance_exists(obj_overlay_row)
                    {
                        instance_destroy(obj_overlay_row)
                    }
                                               
                    rows=ds_list_create()
                    overlay_next_rank=0
                    
                    while global.game_time&gt;=global.profiles[#1,overlay_next_rank]
                    {
                        overlay_next_rank+=1
                    }
                    
                    if overlay_next_rank=0
                    {
                        create_overlay_row(0,global.selected_profile,overlay_next_rank+1,global.game_time)
                        user_profile=row
                        create_overlay_row(1,global.profiles[#0,overlay_next_rank],overlay_next_rank+2,global.profiles[#1,overlay_next_rank])
                        create_overlay_row(2,global.profiles[#0,overlay_next_rank+1],overlay_next_rank+3,global.profiles[#1,overlay_next_rank+1])
                        create_overlay_row(3,global.profiles[#0,overlay_next_rank+2],overlay_next_rank+4,global.profiles[#1,overlay_next_rank+2])
                        create_overlay_row(4,global.profiles[#0,overlay_next_rank+3],overlay_next_rank+5,global.profiles[#1,overlay_next_rank+3])
                    }
                    
                    if overlay_next_rank&gt;=1 and overlay_next_rank&lt;=profile_count-empty_profiles-2
                    {    
                        create_overlay_row(0,global.profiles[#0,overlay_next_rank-1],overlay_next_rank,global.profiles[#1,overlay_next_rank-1])
                        create_overlay_row(1,global.selected_profile,overlay_next_rank+1,global.game_time)
                        user_profile=row
                        create_overlay_row(2,global.profiles[#0,overlay_next_rank],overlay_next_rank+2,global.profiles[#1,overlay_next_rank])
                        create_overlay_row(3,global.profiles[#0,overlay_next_rank+1],overlay_next_rank+3,global.profiles[#1,overlay_next_rank+1])
                        create_overlay_row(4,global.profiles[#0,overlay_next_rank+2],overlay_next_rank+4,global.profiles[#1,overlay_next_rank+2])
                    }
                    
                    if overlay_next_rank=profile_count-empty_profiles-1
                    {
                        create_overlay_row(0,global.profiles[#0,overlay_next_rank-2],overlay_next_rank-1,global.profiles[#1,overlay_next_rank-2])
                        create_overlay_row(1,global.profiles[#0,overlay_next_rank-1],overlay_next_rank,global.profiles[#1,overlay_next_rank-1])
                        create_overlay_row(2,global.selected_profile,overlay_next_rank+1,global.game_time)
                        user_profile=row
                        create_overlay_row(3,global.profiles[#0,overlay_next_rank],overlay_next_rank+2,global.profiles[#1,overlay_next_rank])                                    
                    }
                    
                    if overlay_next_rank=profile_count-empty_profiles
                    {
                        create_overlay_row(0,global.profiles[#0,overlay_next_rank-3],overlay_next_rank-2,global.profiles[#1,overlay_next_rank-3])
                        create_overlay_row(1,global.profiles[#0,overlay_next_rank-2],overlay_next_rank-1,global.profiles[#1,overlay_next_rank-2])
                        create_overlay_row(2,global.profiles[#0,overlay_next_rank-1],overlay_next_rank,global.profiles[#1,overlay_next_rank-1])                                   
                        create_overlay_row(3,global.selected_profile,overlay_next_rank+1,global.game_time)     
                        user_profile=row               
                    }
                    
                    overlay_init_lock=true
                    
                    for(i=0;i!=ds_list_size(rows);i+=1)
                    {
                        show_debug_message('['+string(i)+'] &gt;&gt; ('+string(rows[| i].username)+') -- RANK: '+string(rows[| i].rank))
                    }
                    show_debug_message('------------------------------------------------------------')
    
                }
                
                user_profile.time=global.game_time
                  
                // Top Border
                draw_area(350,450,600,492,c_ltgray,c_black,2)
                
                // Next Rank Updater
                if overlay_next_rank&lt;profile_count-empty_profiles and global.game_time&gt;=global.profiles[#1,overlay_next_rank]
                { 
                    show_debug_message(global.game_time)
                    show_debug_message(global.profiles[#1,overlay_next_rank])
                             
                    show_debug_message('ADDING 1 TO '+string(overlay_next_rank))
                    overlay_next_rank+=1 
                    
                    user_pos=get_user_profile_pos()
                    
                    if user_pos=0
                    {
                        rows[| 0].y_target=492+27*1
                        rows[| 0].rank+=1
                        rows[| 1].y_target=492+27*0
                        rows[| 1].rank-=1
                        
                        list_index_swap(0,1)
                    }
                                 
                    if user_pos=1
                    {
                        if overlay_next_rank&lt;=profile_count-empty_profiles-2
                        {
                            rows[| 0].y_target=492+27*-1
                            rows[| 1].rank+=1
                            rows[| 2].y_target=492+27*0
                            rows[| 2].rank-=1
                            rows[| 3].y_target=492+27*2
                            rows[| 4].y_target=492+27*3
                            
                            rows[| 0]=rows[| 2]
                            rows[| 2]=rows[| 3]
                            rows[| 3]=rows[| 4]
                            
                            if overlay_next_rank!=profile_count-empty_profiles-2
                            {
                                row=instance_create(350,573,obj_overlay_row)
                                row.rank=overlay_next_rank+4
                                row.username=global.profiles[#0, overlay_next_rank+2]
                                row.time=global.profiles[#1, overlay_next_rank+2]
                                rows[| 4]=row
                                show_debug_message('new row created')
                            }
                            else
                            {
                                ds_list_delete(rows,4)
                            }
                        }
                        else
                        {
                            rows[| 1].y_target=492+27*2
                            rows[| 1].rank+=1
                            rows[| 2].y_target=492+27*1
                            rows[| 2].rank-=1
                            
                            list_index_swap(1,2)
                        }                    
                    }
                    
                    if user_pos=2
                    {
                        rows[| 2].y_target=492+27*3
                        rows[| 2].rank+=1
                        rows[| 3].y_target=492+27*2
                        rows[| 3].rank-=1
                        
                        list_index_swap(2,3)
                    }     
                    
                    user_profile.flash=30
                        
                    for(i=0;i!=ds_list_size(rows);i+=1)
                    {
                        show_debug_message('['+string(i)+'] &gt;&gt; ('+string(rows[| i].username)+') -- RANK: '+string(rows[| i].rank))
                    }
                    show_debug_message('------------------------------------------------------------')                      
                }
                            
                if overlay_next_rank&lt;profile_count-empty_profiles
                {
                    draw_config(fnt_overlay_big,c_black,fa_middle,fa_middle)
                    draw_text(413,463,format_time(global.game_time-global.profiles[#1,overlay_next_rank],false))
                }
                else
                {
                    draw_config(fnt_overlay_big,c_black,fa_middle,fa_middle)
                    draw_text(413,463,'N/A')
                }
                
                draw_config(fnt_overlay_small,2302755,fa_middle,fa_middle)  // Light Charcoal
                draw_text(413,479,'rank down')
                                
                // Time until personal best
                draw_config(fnt_overlay_big,c_black,fa_middle,fa_middle)
                user=get_username_from_name(global.selected_profile)
                if user!="anonymous" and global.profiles[#1,user]!=undefined
                {   
                    if global.game_time&lt;global.profiles[#1,user]
                    {
                        draw_text(537,463,format_time(global.game_time-global.profiles[#1,user],false))
                    }
                    else
                    {
                        draw_text(537,463,'passed')
                    }
                }
                else
                {
                    draw_text(537,463,'not found')
                }
                draw_config(fnt_overlay_small,2302755,fa_middle,fa_middle) // Light Charcoal
                draw_text(537,479,'personal best')              
            }
            else
            {
                // Background
                draw_area(350,450,600,600,c_white,c_black,1)
                
                // Prompt
                draw_config(fnt_overlay_big,c_black,fa_middle,fa_middle)
                draw_text(500,525,'data not found##options-&gt;profiles#to download')
            }
        }
    }
}   

if room=rm_end
{   
    // Background
    draw_area(0,0,599,599,12640234,c_black,2)                   // Lighter Mocha
    
    // Dividers
    draw_config(fnt_end_big,c_black,fa_middle,fa_middle)
    draw_rectangle(300-1,200-25,300+1,200+30,0)
    draw_rectangle(300-1,280-25,300+1,280+30,0)
    draw_rectangle(300-1,370-25,300+1,370+30,0)
    draw_rectangle(20,435,579,435+1,0)
    
    // Top
    draw_area(0,0,599,64,10401985,c_black,2)                    // Light Mocha
    
    // Title
    draw_config(fnt_end_small,4995380,fa_middle,fa_middle)     // Grayish
    
    if global.selected_profile!='anonymous'
    {
        if !global.local_save_mode
        {
            if global.push_run_reciept=false
            {
                if global.push_run_attempt=0
                {
                    draw_text(300,32,'Waiting for server confirmation...')
                }
                else
                {
                    draw_text(300,32,'confirmation failed, retrying ('+string(global.push_run_attempt)+')')
                }
                
                global.push_run_timer-=1
            }
            else
            {
                draw_text(300,32,'Run saved to server!')
            }
            
            if global.push_run_timer=0
            {
                global.push_run_attempt+=1
                global.push_run_timer=150
                send_payload('push_run',global.selected_profile,global.game_time,int64(date_second_span(global.unix_start,date_current_datetime())),global.kill_count,global.death_count,global.jump_count,global.dash_count)
            }
        }
        else
        {
            if global.local_save_lock=false
            {
                if global.selected_profile!='anonymous'
                {                            
                    name=global.selected_profile
                    if file_exists(name+'.boomeraxe')
                    {
                        
                        ini_open(name+'.boomeraxe')
                        run_count=ini_read_real('save','run_count',0)
                        
                        ini_write_real('save',string(run_count)+'0',global.game_time)
                        ini_write_real('save',string(run_count)+'1',int64(date_second_span(global.unix_start,date_current_datetime())))
                        ini_write_real('save',string(run_count)+'2',global.kill_count)
                        ini_write_real('save',string(run_count)+'3',global.death_count)
                        ini_write_real('save',string(run_count)+'4',global.jump_count)
                        ini_write_real('save',string(run_count)+'5',global.dash_count)
                                            
                        ini_write_real('save','run_count',run_count+1)  
                          
                        ini_close()     
                    }
                    else
                    {
                        ini_open(name+'.boomeraxe')
                        
                        ini_write_real('save','run_count',1)
                        
                        ini_write_real('save','00',global.game_time)
                        ini_write_real('save','01',int64(date_second_span(global.unix_start,date_current_datetime())))
                        ini_write_real('save','02',global.kill_count)
                        ini_write_real('save','03',global.death_count)
                        ini_write_real('save','04',global.jump_count)
                        ini_write_real('save','05',global.dash_count)
                        
                        ini_close()
                    }             
                            
                    ini_open('boomeraxe.ini')
                    
                    run_count=ini_read_real(name,'run_count',0)
                    
                    ini_write_real(name,string(run_count)+'0',global.game_time)
                    ini_write_real(name,string(run_count)+'1',int64(date_second_span(global.unix_start,date_current_datetime())))
                    ini_write_real(name,string(run_count)+'2',global.kill_count)
                    ini_write_real(name,string(run_count)+'3',global.death_count)
                    ini_write_real(name,string(run_count)+'4',global.jump_count)
                    ini_write_real(name,string(run_count)+'5',global.dash_count)
                    
                    if global.game_time&lt;ini_read_real(name,'best_time',0) or ini_read_real(name,'run_count',0)=0
                    {
                        ini_write_real(name,'best_time',global.game_time)
                        ini_write_real(name,'best_date',int64(date_second_span(global.unix_start,date_current_datetime())))
                    }
                    
                    if global.game_time&lt;ini_read_real('meta','best',0)
                    {
                        ini_write_real('meta','best',global.game_time)
                    }
                    
                    
                    ini_write_real(name,'run_count',run_count+1)
                    
                    ini_close()
                    global.local_save_lock=true
                }            
            }
            else
            {
                draw_text(300,32,'Run saved to file!')
            }
        }
    }
    else
    {
        draw_text(300,32,'Run Completed!')
    }
        
    // Runtime
    draw_config(fnt_end_big,c_black,fa_middle,fa_middle)
    draw_text(300,110,format_time(global.game_time,false))
    draw_config(fnt_end_tiny,4079406,fa_middle,fa_middle)       // Murky Turquoise
    draw_text(300,156,'Final Runtime')
    
    // World Record
    draw_config(fnt_end_medium,4995380,fa_middle,fa_middle)     // Grayish
    draw_text(150,200,format_time(global.best_time,false))
    draw_config(fnt_end_tiny,4079406,fa_middle,fa_middle)       // Murky Turquoise
    draw_text(150,230,'World Record')
    
    if global.game_time-global.best_time&gt;0
    {
        draw_config(fnt_end_small,3018673,fa_middle,fa_middle)  // Crimson
        draw_text(450,200,format_time(global.game_time-global.best_time,true))
    }
    else
    {
        draw_config(fnt_end_small,2852688,fa_middle,fa_middle)  // Radioactive
        draw_text(450,200,format_time(global.game_time-global.best_time,true))    
    }
        
    // Personal Record
    draw_config(fnt_end_medium,4995380,fa_middle,fa_middle)     // Grayish
    
    if global.selected_profile='anonymous' or global.profiles[#1,selected_profile]=undefined
    {
        draw_text(150,280,"N/A")
    }
    else
    {
        draw_text(150,280,format_time(global.profiles[#1,selected_profile],false))
    }
    
    draw_config(fnt_end_tiny,4079406,fa_middle,fa_middle)       // Murky Turquoise
    draw_text(150,310,'Personal Record')

    if global.selected_profile='anonymous' or global.profiles[#1,selected_profile]=undefined
    {
        draw_config(fnt_end_small,c_dkgray,fa_middle,fa_middle)
        draw_text(450,280,'N/A')
    }
    else
    {
        if global.game_time-global.profiles[#1,selected_profile]&gt;0
        {
            draw_config(fnt_end_small,3018673,fa_middle,fa_middle)  // Crimson
            draw_text(450,280,format_time(global.game_time-global.profiles[#1,selected_profile],true))
        }
        else
        {
            draw_config(fnt_end_small,2852688,fa_middle,fa_middle)  // Radioactive
            draw_text(450,280,format_time(global.game_time-global.profiles[#1,selected_profile],true))    
        }        
    }
    // Rank
    
    if global.selected_profile='anonymous'
    {
        c_rank=c_dkgray
    }   
    else if new_rank=1
    {
        c_rank=3118552
    }
    else if new_rank=2
    {
        c_rank=11184288
    }
    else if new_rank=3
    {
        c_rank=4621262
    }
    else
    {
        c_rank=3564704
    }
   
    draw_area(149-35,370-35,149+35,370+35,c_rank,c_black,2)
    draw_config(fnt_end_tiny,4079406,fa_middle,fa_middle)       // Murky Turquoise
    draw_text(150,416,'New Rank')
        
    if global.selected_profile!='anonymous'
    {
        draw_config(fnt_end_medium,c_black,fa_middle,fa_middle)
        draw_text(152,369,new_rank)
    }
    else
    {
        draw_config(fnt_end_medium,c_white,fa_middle,fa_middle)
        draw_text(152,369,'?')
    }
    
    if global.selected_profile!='anonymous'
    {
        draw_config(fnt_end_small,27357,fa_middle,fa_middle)        // Dirty Orange
        draw_text_transformed(450,370,string(clamp(selected_profile+1-new_rank,0,10000))+' Ranks Gained!',0.75,0.75,0)
    }
    else
    {
        draw_config(fnt_end_small,c_dkgray,fa_middle,fa_middle)
        draw_text_transformed(450,370,'anonymous runs#not ranked!',0.75,0.75,0)
    }
        
    // Stats
    draw_config(fnt_end_medium,4995380,fa_middle,fa_middle)     // Grayish
    draw_text(90,475,global.kill_count)
    draw_text(230,475,global.death_count)
    draw_text(370,475,global.jump_count)
    draw_text(510,475,global.dash_count)
   
    draw_config(fnt_end_tiny,4079406,fa_middle,fa_middle)       // Murky Turquoise
    draw_text(90,505,'Kills')
    draw_text(230,505,'Deaths')
    draw_text(370,505,'Jumps')
    draw_text(510,505,'Dashes')

    // Buttons
    draw_area(0,530,200,599,9743541,c_black,3)                  // Sandstone Mocha
    draw_area(200,530,400,599,9743541,c_black,3)                // Sandstone Mocha
    draw_area(400,530,599,599,9743541,c_black,3)                // Sandstone Mocha
    
    draw_config(fnt_end_small,c_black,fa_middle,fa_middle)
    draw_text_transformed(100,565,'New Run',0.8,0.8,0)
    draw_text_transformed(300,565,'Title Screen',0.8,0.8,0)
    draw_text_transformed(500,565,'Exit Game',0.8,0.8,0)
    
    select+=keyboard_check_pressed(global.k[? 'right'])-keyboard_check_pressed(global.k[? 'left'])
    select=clamp(select,0,2)
    
    if select=0
    {
        draw_select(100,565,200,70,4)
    }
    
    if select=1
    {
        draw_select(300,565,200,70,4)
    }
    
    if select=2
    {
        draw_select(500,565,200,70,4)
    }
    
    if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(global.k[? 'jump'])
    {
        if select=0
        {
            room=rm_main
        }
        if select=1
        {
            room=rm_title
        }
        if select=2
        {
            game_end()
        }
    }
}

if !search_toggle and binding_select=undefined
{
    // User Input
    if keyboard_check(global.k[? 'up'])
    {
        if hold_up=0 or (hold_up&gt;15 and hold_up mod 3=0)
        {
            select-=1
        }
        hold_up+=1
    }
    else
    {
        hold_up=0
    }
    
    if keyboard_check(global.k[? 'down'])
    {
        if hold_dn=0 or (hold_dn&gt;15 and hold_dn mod 3=0)
        {
            select+=1
        }
        hold_dn+=1
    }
    else
    {
        hold_dn=0
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Counters and run_over
if room=rm_main
{
    if run_over
    {
        draw_credits()
        credit_scroll+=2
    }
    else if !paused and !instance_exists(obj_player_death)
    {
        global.game_time+=2    // Room speed is 50, so this should be an accurate timer
    }
    
    // Game Stats

    // death_count &amp; jump_count &amp; dash_count being updated by obj_player
    // kill_count being updated by obj_enemy
    
    if instance_exists(obj_player) and obj_player.y&gt;room_height
    {
        run_over=true
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Profile Animations
if room=rm_title
{
    if name_error&gt;0
    {
        c_create_name=merge_colour(c_white,c_red,name_error/120)
        name_error-=5
    }
    
    if pass_error&gt;0
    {
        c_create_pass=merge_colour(c_white,c_red,pass_error/120)
        pass_error-=5
    }
}

if room=rm_main
{
    if profile_match&gt;0
    {
        c_search=merge_colour(c_black,c_lime,profile_match)
    }
    
    if profile_match&lt;0
    {
        c_search=merge_colour(c_black,c_red,abs(profile_match))
    }
    
    if profile_match=0
    {
        c_search=0
    }
    
    if profile_match=-1
    {
        y_match=20
    }
    
    if profile_match=0
    {
        y_match=0
    }
    
    if profile_match&gt;-0.1 and profile_match&lt;0
    {
        y_match-=4
    }
    
    if profile_match!=0
    {
        profile_match-=sign(profile_match)*0.02
    }
    
    if login_fail!=0
    {
        login_fail-=0.02
    }
    
    if logged_in_prompt&gt;0
    {
        logged_in_prompt-=1
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
