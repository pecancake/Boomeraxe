<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>init_lock=false
spawn_lock=false

init_x=x
init_y=y

alpha=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if init_lock=false
{
    target_x=target.x
    target_y=target.y
    target_object_index=target.object_index
    size=floor(point_distance(x,y,target_x+10,target_y+5)/20)
    distance=point_distance(x,y,target_x+10,target_y+5)/size
    angle=point_direction(x,y,target_x+10,target_y+5)
    
    for(i=0;i!=size+1;i+=1)
    {
        if target.object_index=obj_savepoint
        {
            create_particles(x+lengthdir_x(distance*i,angle),y+lengthdir_y(distance*i,angle),'teleport_savepoint')
        }
        else
        {
            create_particles(x+lengthdir_x(distance*i,angle),y+lengthdir_y(distance*i,angle),'teleport_telepoint')
        }        
    }
        
    init_lock=true
}

if x=target_x+10 and y=target_y+5
{
    if spawn_lock=false
    {
        instance_create(x,y,obj_player)
        spawn_lock=true
    }
    
    alpha-=0.1
    
    if alpha=0
    {
        instance_destroy()
        
        if instance_exists(target) and target.object_index=obj_telepoint
        {
            instance_destroy(target)
        }
    }
}
else
{
    x+=(target_x+10-x)/2.5
    y+=(target_y+5-y)/2.5
    
    if abs(target_x+10-x)&lt;5
    {
        x=target_x+10
    }
    if abs(target_y+5-y)&lt;5
    {
        y=target_y+5
    }
}  

if target_object_index=obj_savepoint
{
    draw_set_colour(c_lime)
}
else
{
    draw_set_colour(c_aqua)
}

draw_set_alpha(alpha)
draw_line_width(init_x,init_y,target_x+10,target_y+5,8)
draw_set_alpha(1)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
